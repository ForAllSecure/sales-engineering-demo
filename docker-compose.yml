version: "3.4"
services:

  jenkins:
    build: ./jenkins
    hostname: 'jenkins'
    ports:
      - "8081:8080"
    links:
      - socat
    environment:
      - DOCKER_HOST=tcp://socat:2375
      - MAPI_TOKEN
      - JENKINS_ADMIN_PASSWORD
      - MAYHEM_TOKEN
      - MAYHEM_URL
      - MAYHEM_USERNAME

  gitlab:
    image: '${GITLAB_IMAGE_OVERRIDE:-gitlab/gitlab-ce}'
    restart: always
    hostname: 'gitlab'
    privileged: true
    healthcheck:
      test: ["CMD", "curl", "-f", "http://localhost"]
      interval: 30s
      timeout: 10s
      retries: 5
    environment:
      GITLAB_OMNIBUS_CONFIG: |
        external_url 'http://gitlab'
      # Set the runner registration token to equal the root password
      GITLAB_SHARED_RUNNERS_REGISTRATION_TOKEN: ${GITLAB_ROOT_PASSWORD}
      GITLAB_ROOT_PASSWORD: ${GITLAB_ROOT_PASSWORD}
    ports:
      - "8080:80"
      - "8043:443"
      - "8022:22"
    volumes:
      # inserts PAT token (from .env GITLAB_ROOT_PASSWORD)
      - ./gitlab/25_api_personal_access_token.rb:/opt/gitlab/embedded/service/gitlab-rails/db/fixtures/production/25_api_personal_access_token.rb
    
      # Currently not persisting volumes because this is a throwaway container
      #   - ./gitlab-config:/etc/gitlab
      #   - ./gitlab-logs:/var/log/gitlab
      #   - ./gitlab-data:/var/opt/gitlab

  # this registers the runner and writes to the config.toml, which is used by gitlab-runner
  gitlab-runner-register:
    image: gitlab/gitlab-runner
    # todo: probably we want a docker type executor, not shell
    command: 'register --executor shell --registration-token ${GITLAB_ROOT_PASSWORD} --url http://gitlab -n'
    restart: "no"
    depends_on:
      gitlab:
        condition: service_healthy
    links:
      - gitlab:gitlab
    volumes:
      - ./gitlab-runner/config.toml:/etc/gitlab-runner/config.toml

  # this clones, pushes and keeps mirroring our example repos to Gitlab. 
  # if you make changes to the shell script run with --force-recreate
  mayhem-action-example-pusher:
    image: alpine
    entrypoint: sh
    command: /mayhem-action-example-pusher.sh
    restart: "no"
    depends_on:
      gitlab:
        condition: service_healthy
    volumes:
      - ./mayhem-action-example-pusher.sh:/mayhem-action-example-pusher.sh
    environment:
      - GITLAB_ROOT_PASSWORD

  # this is the actual runner that depends on being bootstrapped by gitlab-runner-register
  gitlab-runner:
    build: ./gitlab-runner
    environment:
      - DOCKER_HOST=tcp://socat:2375
    links:
      - socat
    depends_on:
      # needs to be registered first before it can start running
      - gitlab-runner-register
    volumes:
      - ./gitlab-runner/config.toml:/etc/gitlab-runner/config.toml

  # Gitlabs Configuration as Code (CasC).
  # Kind of overkill to use since we only create instance variables currently
  gitlab-casc:
    image: hoffmannlaroche/gcasc
    restart: "no"
    depends_on:
      gitlab:
        condition: service_healthy
    links:
      - gitlab:gitlab
    volumes:
      - ./gcacs:/workspace
    environment:
      - GITLAB_CLIENT_CONFIG_FILE=/workspace/client.cfg
      - GITLAB_CONFIG_FILE=/workspace/config.yml
      - GITLAB_CLIENT_TOKEN=${GITLAB_ROOT_PASSWORD}
      - MAPI_TOKEN=${MAPI_TOKEN}
      - MAYHEM_TOKEN=${MAYHEM_TOKEN}
      - MAYHEM_URL=${MAYHEM_URL}
      - MAYHEM_USERNAME=${MAYHEM_USERNAME}

  # To work around problems mounting /var/run/docker.sock directly on Mac on jenkins and gitlab
  # Will get 'Got permission denied while trying to connect to the Docker daemon socket at unix:///var/run/docker.sock'
  # This is not easily fixable since the mount group will be influenced by the GID on the host OS.
  #
  # See https://www.benjaminpack.com/blog/docker-jenkins-mac/
  # See https://stackoverflow.com/questions/61490937/cant-connect-to-docker-inside-jenkins-docker-container-macos
  socat:
      image: alpine/socat
      command: TCP4-LISTEN:2375,fork,reuseaddr UNIX-CONNECT:/var/run/docker.sock
      volumes:
          - /var/run/docker.sock:/var/run/docker.sock
      expose:
          - "2375"